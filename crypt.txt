#client.py
import socket


# Function to generate the Playfair cipher grid
def generate_grid(key):
    key = "".join(sorted(set(key), key=lambda x: key.index(x)))
    grid = []
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"  # I and J are combined
    used = set(key)


    for char in key:
        grid.append(char)
    for char in alphabet:
        if char not in used:
            grid.append(char)


    return [grid[i:i + 5] for i in range(0, 25, 5)]  # Create a 5x5 grid


# Function to prepare the plaintext by splitting into digraphs
def prepare_text(plaintext):
    plaintext = plaintext.upper().replace("J", "I").replace(" ", "")  # Replace J with I and remove spaces
    pairs = []


    i = 0
    while i < len(plaintext):
        if i + 1 < len(plaintext) and plaintext[i] != plaintext[i + 1]:
            pairs.append(plaintext[i:i + 2])
            i += 2
        else:
            pairs.append(plaintext[i] + "X")  # If both letters are the same, add 'X'
            i += 1
    return pairs


# Function to find the position of a character in the grid
def find_position(c, grid):
    for i in range(5):
        for j in range(5):
            if grid[i][j] == c:
                return i, j
    return -1, -1


# Function to encrypt a pair of characters
def encrypt_pair(pair, grid):
    r1, c1 = find_position(pair[0], grid)
    r2, c2 = find_position(pair[1], grid)


    # Rule 1: Same row - shift right
    if r1 == r2:
        c1 = (c1 + 1) % 5
        c2 = (c2 + 1) % 5
    # Rule 2: Same column - shift down
    elif c1 == c2:
        r1 = (r1 + 1) % 5
        r2 = (r2 + 1) % 5
    # Rule 3: Rectangle - swap corners
    else:
        c1, c2 = c2, c1


    return grid[r1][c1] + grid[r2][c2]


# Function to encrypt the plaintext using Playfair cipher
def playfair_encrypt(plaintext, key):
    grid = generate_grid(key)
    pairs = prepare_text(plaintext)
    encrypted_text = ''.join([encrypt_pair(pair, grid) for pair in pairs])
    return encrypted_text


# Function to decrypt the ciphertext using Playfair cipher
def playfair_decrypt(ciphertext, key):
    grid = generate_grid(key)
    pairs = [ciphertext[i:i + 2] for i in range(0, len(ciphertext), 2)]
    decrypted_text = []


    for pair in pairs:
        r1, c1 = find_position(pair[0], grid)
        r2, c2 = find_position(pair[1], grid)


        # Rule 1: Same row - shift left
        if r1 == r2:
            c1 = (c1 - 1) % 5
            c2 = (c2 - 1) % 5
        # Rule 2: Same column - shift up
        elif c1 == c2:
            r1 = (r1 - 1) % 5
            r2 = (r2 - 1) % 5
        # Rule 3: Rectangle - swap corners
        else:
            c1, c2 = c2, c1


        decrypted_text.append(grid[r1][c1] + grid[r2][c2])


    return ''.join(decrypted_text).replace("X", "")


# Client setup
def start_client():
    host = '127.0.0.1'
    port = 12345
    key = "MONARCHY"  # Playfair cipher key
 
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((host, port))


    while True:
        message = input("Client message: ")
        # Encrypt the message before sending
        encrypted_message = playfair_encrypt(message, key)
        client_socket.send(encrypted_message.encode())


        # Receive and decrypt the response
        encrypted_response = client_socket.recv(1024).decode()
        print(f"Received (encrypted): {encrypted_response}")
        if not encrypted_response:
            break
       
        decrypted_response = playfair_decrypt(encrypted_response, key)
        print(f"Server reply (decrypted): {decrypted_response}")


    client_socket.close()


if __name__ == "__main__":
    start_client()

#server.py
import socket


# Function to generate the Playfair cipher grid
def generate_grid(key):
    key = "".join(sorted(set(key), key=lambda x: key.index(x)))
    grid = []
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"  # I and J are combined
    used = set(key)


    for char in key:
        grid.append(char)
    for char in alphabet:
        if char not in used:
            grid.append(char)


    return [grid[i:i + 5] for i in range(0, 25, 5)]  # Create a 5x5 grid


# Function to prepare the plaintext by splitting into digraphs
def prepare_text(plaintext):
    plaintext = plaintext.upper().replace("J", "I").replace(" ", "")  # Replace J with I and remove spaces
    pairs = []


    i = 0
    while i < len(plaintext):
        if i + 1 < len(plaintext) and plaintext[i] != plaintext[i + 1]:
            pairs.append(plaintext[i:i + 2])
            i += 2
        else:
            pairs.append(plaintext[i] + "X")  # If both letters are the same, add 'X'
            i += 1
    return pairs


# Function to find the position of a character in the grid
def find_position(c, grid):
    for i in range(5):
        for j in range(5):
            if grid[i][j] == c:
                return i, j
    return -1, -1


# Function to encrypt a pair of characters
def encrypt_pair(pair, grid):
    r1, c1 = find_position(pair[0], grid)
    r2, c2 = find_position(pair[1], grid)


    # Rule 1: Same row - shift right
    if r1 == r2:
        c1 = (c1 + 1) % 5
        c2 = (c2 + 1) % 5
    # Rule 2: Same column - shift down
    elif c1 == c2:
        r1 = (r1 + 1) % 5
        r2 = (r2 + 1) % 5
    # Rule 3: Rectangle - swap corners
    else:
        c1, c2 = c2, c1


    return grid[r1][c1] + grid[r2][c2]


# Function to encrypt the plaintext using Playfair cipher
def playfair_encrypt(plaintext, key):
    grid = generate_grid(key)
    pairs = prepare_text(plaintext)
    encrypted_text = ''.join([encrypt_pair(pair, grid) for pair in pairs])
    return encrypted_text


# Function to decrypt the ciphertext using Playfair cipher
def playfair_decrypt(ciphertext, key):
    grid = generate_grid(key)
    pairs = [ciphertext[i:i + 2] for i in range(0, len(ciphertext), 2)]
    decrypted_text = []


    for pair in pairs:
        r1, c1 = find_position(pair[0], grid)
        r2, c2 = find_position(pair[1], grid)


        # Rule 1: Same row - shift left
        if r1 == r2:
            c1 = (c1 - 1) % 5
            c2 = (c2 - 1) % 5
        # Rule 2: Same column - shift up
        elif c1 == c2:
            r1 = (r1 - 1) % 5
            r2 = (r2 - 1) % 5
        # Rule 3: Rectangle - swap corners
        else:
            c1, c2 = c2, c1


        decrypted_text.append(grid[r1][c1] + grid[r2][c2])


    return ''.join(decrypted_text).replace("X", "")


# Server setup
def start_server():
    host = '127.0.0.1'
    port = 12345
    key = "MONARCHY"  # Playfair cipher key
 
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(1)


    print(f"Server listening on {host}:{port}...")
 
    conn, addr = server_socket.accept()
    print(f"Connection from {addr} established.")


    while True:
        encrypted_msg = conn.recv(1024).decode()
        if not encrypted_msg:
            break
        print(f"Received (encrypted): {encrypted_msg}")


        # Decrypt the received message
        decrypted_msg = playfair_decrypt(encrypted_msg, key)
        print(f"Decrypted message: {decrypted_msg}")


        # Encrypt the response message
        response = input("Server reply: ")
        encrypted_response = playfair_encrypt(response, key)


        # Send the encrypted response back to the client
        conn.send(encrypted_response.encode())


    conn.close()
    server_socket.close()


if __name__ == "__main__":
    start_server()
